package nz.net.dnh.evetool.hibernate.evetool;

// Generated 10/08/2011 3:49:46 PM by Hibernate Tools 3.4.0.CR1

import static nz.net.dnh.common.Globals.getHex;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "User", catalog = "EVETool", uniqueConstraints = @UniqueConstraint(columnNames = {
		"APIKey", "CharacterID" }))
public class User implements java.io.Serializable, nz.net.dnh.evetool.entities.evetool.User {

	private UserId id;
	private Corporation corporation;
	private String apikey;
	private String keyType;
	private int userId;
	private int characterId;
	private String password;
	private RegistrationType registrationType;
	private Set<Role> userRoles;

	public User() {
	}

	public User(UserId id, Corporation corporation, String apikey,
			String keyType, int userId, int characterId, String password,
			RegistrationType registrationType) {
		this.id = id;
		this.corporation = corporation;
		this.apikey = apikey;
		this.keyType = keyType;
		this.userId = userId;
		this.characterId = characterId;
		this.password = password;
		this.registrationType = registrationType;
	}

	public User(UserId id, Corporation corporation, String apikey,
			String keyType, int userId, int characterId, String password,
			RegistrationType registrationType, Set<Role> userRole) {
		this.id = id;
		this.corporation = corporation;
		this.apikey = apikey;
		this.keyType = keyType;
		this.userId = userId;
		this.characterId = characterId;
		this.password = password;
		this.registrationType = registrationType;
		this.userRoles = userRole;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "userName", column = @Column(name = "UserName", nullable = false, length = 50)),
			@AttributeOverride(name = "corpId", column = @Column(name = "CorpID", nullable = false)) })
	public UserId getId() {
		return this.id;
	}

	public void setId(UserId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CorpID", nullable = false, insertable = false, updatable = false)
	public Corporation getCorporation() {
		return this.corporation;
	}

	public void setCorporation(Corporation corporation) {
		this.corporation = corporation;
	}

	@Column(name = "APIKey", nullable = false, length = 128)
	public String getApikey() {
		return this.apikey;
	}

	public void setApikey(String apikey) {
		this.apikey = apikey;
	}

	@Column(name = "KeyType", nullable = false, length = 7)
	public String getKeyType() {
		return this.keyType;
	}

	public void setKeyType(String keyType) {
		this.keyType = keyType;
	}

	@Column(name = "UserID", nullable = false)
	public int getUserId() {
		return this.userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	@Column(name = "CharacterID", nullable = false)
	public int getCharacterId() {
		return this.characterId;
	}

	public void setCharacterId(int characterId) {
		this.characterId = characterId;
	}

	@Column(name = "Password", nullable = false, length = 64)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	public boolean isPassword(String password) {
		try {
			MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
			String bytes = getHex(sha256.digest(password.getBytes())).toLowerCase();
			
			return this.getPassword().equals(bytes);
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException("SHA256 is required to be present", e);
		}
	}

	@Column(name = "RegistrationType", nullable = false)
	@Enumerated(EnumType.STRING)
	public RegistrationType getRegistrationType() {
		return this.registrationType;
	}

	public void setRegistrationType(RegistrationType registrationType) {
		this.registrationType = registrationType;
	}

	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(
			name = "UserRole", 
			joinColumns = {	@JoinColumn(name = "CorpID"), @JoinColumn(name = "UserName") }, 
			inverseJoinColumns = { @JoinColumn(name = "RoleID") })
	public Set<Role> getUserRole() {
		return this.userRoles;
	}

	public void setUserRole(Set<Role> userRole) {
		this.userRoles = userRole;
	}

}
